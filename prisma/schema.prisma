generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(cuid())
  userId       String
  expires      DateTime
  sessionToken String   @unique
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId], name: "userId")
}
enum UserRole {
  ADMIN
  LECTURER
  STUDENT
}
enum UserStatus {
  ACTIVE
  INACTIVE
  SUSPENDED
}
enum LearningOutcome {
  PL01
  PL02
  PL03
  PL04
  PL05
  PL06
  PL07
  PL08
  PL09
  PL10
}
enum TestType {
  mcq
  true_false
  matching
  fillup
  rewrite
}

model User {
  id              String       @id @default(cuid())
  name            String?
  email           String?      
  emailVerified   DateTime?
  image           String?
  userName        String      @unique
  password        String
  role            UserRole     @default(STUDENT)
  status          UserStatus   @default(ACTIVE)
  studentId       String?      
  class           String?      
  department      String?      
  accounts        Account[]
  sessions        Session[]
  createdTests    Test[]       @relation("CreatedTests")
  accessibleTests TestAccess[]
  createdFolders  Folder[]     @relation("CreatedFolders")
  TestResult      TestResult[]
  supervisedClasses Class[]   @relation("SupervisedClasses")
  classes         UserClass[]
  createdAt       DateTime    @default(now())  
  @@index([role])
}

model Class {
  id            String   @id @default(cuid())
  name          String   
  supervisorId  String?  
  supervisor    User?    @relation("SupervisedClasses", fields: [supervisorId], references: [id])
  students      UserClass[] 
  createdAt     DateTime    @default(now())  
  @@index([supervisorId])
}

model UserClass {
  id        String @id @default(cuid())
  userId    String
  classId   String
  user      User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  class     Class  @relation(fields: [classId], references: [id], onDelete: Cascade)

  @@unique([userId, classId]) 
  @@index([userId])  
  @@index([classId])
}

model Folder {
  id          String   @id @default(cuid())
  creatorId   String
  name        String
  description String?
  createdAt   DateTime @default(now())
  tests       Test[]
  creator     User     @relation("CreatedFolders", fields: [creatorId], references: [id], onDelete: Cascade)

  @@index([creatorId], name: "creatorId")
}

model Test {
  id              String      @id @default(cuid())
  creatorId       String
  folderId        String?
  timeStarted     DateTime?
  topic           String
  timeEnded       DateTime?
  createdAt       DateTime    @default(now())
  parts           Part[]
  questions       Question[]
  creator         User        @relation("CreatedTests", fields: [creatorId], references: [id], onDelete: Cascade)
  folder          Folder?     @relation(fields: [folderId], references: [id], onDelete: SetNull)
  accessibleBy    TestAccess[]
  testDuration    Int?        @default(60)
  attemptsAllowed Int?        @default(1)
  TestResult      TestResult[]

  @@index([creatorId], name: "creatorId")
  @@index([folderId], name: "folderId")
}


model TestAccess {
  id          String @id @default(cuid())
  testId      String
  userId      String
  accessLevel String
  test        Test   @relation(fields: [testId], references: [id], onDelete: Cascade)
  user        User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([testId, userId])
  @@index([testId])
  @@index([userId])
}

model Part {
  id        String     @id @default(cuid())
  testId    String
  content   String     @db.Text
  testType  TestType   // Thêm trường testType
  questions Question[]
  test      Test       @relation(fields: [testId], references: [id], onDelete: Cascade)

  @@index([testId], name: "testId")
}

model Question {
  id                String     @id @default(cuid())
  question          String
  answer            String
  testId            String?
  partId            String?     // Đổi tên từ paragraphId thành partId
  options           Json?
  percentageCorrect Float?
  questionType      TestType?
  userAnswer        String?
  isCorrect         Boolean?
  test              Test?      @relation(fields: [testId], references: [id], onDelete: Cascade)
  part              Part?      @relation(fields: [partId], references: [id], onDelete: Cascade)
  outcome           LearningOutcome @default(PL01)
  @@index([testId], name: "testId")
  @@index([partId], name: "partId")  // Đổi tên từ paragraphId sang partId
}

model TestResult {
  id             String   @id @default(cuid())
  testId         String
  studentId      String
  submittedAt    DateTime @default(now())
  score          Float    @default(0.0)
  totalScore     Float    @default(0.0)
  passed         Boolean  @default(false)
  studentAnswers Json     @db.Json
  feedback       String?  @db.Text
  startTime      DateTime 
  endTime        DateTime? 
  test           Test     @relation(fields: [testId], references: [id], onDelete: Cascade)
  student        User     @relation(fields: [studentId], references: [id], onDelete: Cascade)
  attemptNumber  Int       @default(0)

  @@unique([testId, studentId, attemptNumber])
  @@index([testId])
  @@index([studentId])
}
