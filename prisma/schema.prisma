generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(cuid())
  userId       String
  expires      DateTime
  sessionToken String   @unique
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId], name: "userId")
}

enum UserRole {
  ADMIN
  LECTURE
  STUDENT
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  role          UserRole  @default(STUDENT)
  accounts      Account[]
  sessions      Session[]
  tests         Test[]
  folders       Folder[]
}

enum TestType {
  mcq
  open_ended
  true_false
  matching
  fillup
  rewrite
}

model Test {
  id          String       @id @default(cuid())
  userId      String
  folderId    String?
  timeStarted DateTime
  topic       String
  timeEnded   DateTime?
  createdAt   DateTime @default(now()) // Thời gian tạo, mặc định là thời gian hiện tại
  paragraphs  Paragraph[]
  questions   Question[]
  testType    TestType
  user        User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  folder      Folder?      @relation(fields: [folderId], references: [id], onDelete: Cascade)

  @@index([userId], name: "userId")
  @@index([folderId], name: "folderId")
}
model Folder {
  id          String   @id @default(cuid())
  userId      String
  name        String
  description String?
  createdAt   DateTime @default(now()) // Thời gian tạo, mặc định là thời gian hiện tại
  tests       Test[]
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId], name: "userId")
}


model Paragraph {
  id       String     @id @default(cuid())
  testId   String
  content  String     @db.Text
  questions Question[]
  test     Test       @relation(fields: [testId], references: [id], onDelete: Cascade)

  @@index([testId], name: "testId")
}

model Question {
  id                String   @id @default(cuid())
  question          String
  answer            String
  testId            String?
  paragraphId       String?
  options           Json? // for mcq question 
  percentageCorrect Float? // for open ended question 
  questionType      TestType?
  userAnswer        String?
  isCorrect         Boolean?
  test              Test?      @relation(fields: [testId], references: [id], onDelete: Cascade)
  paragraph         Paragraph? @relation(fields: [paragraphId], references: [id], onDelete: Cascade)

  @@index([testId], name: "testId")
  @@index([paragraphId], name: "paragraphId")
   @@unique([question, paragraphId])
}
