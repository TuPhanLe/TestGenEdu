generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(cuid())
  userId       String
  expires      DateTime
  sessionToken String   @unique
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId], name: "userId")
}
enum UserRole {
  ADMIN
  LECTURE
  STUDENT
}
enum LabelQuestion {
  EASY
  MEDIUM 
  HARD 
}
enum TestType {
  mcq
  open_ended
  true_false
  matching
  fillup
  rewrite
}

model User {
  id              String       @id @default(cuid())
  name            String?
  email           String?      @unique
  emailVerified   DateTime?
  image           String?
  role            UserRole     @default(STUDENT)
  studentId       String?      // Student ID (optional, relevant if the role is STUDENT)
  class           String?      // Class (optional, relevant if the role is STUDENT)
  department      String?      // Department (optional, relevant if the role is STUDENT)
  accounts        Account[]
  sessions        Session[]
  createdTests    Test[]       @relation("CreatedTests")
  accessibleTests TestAccess[]
  createdFolders  Folder[]     @relation("CreatedFolders")
  TestResult      TestResult[]
  supervisedClasses Class[]   @relation("SupervisedClasses") // Các lớp mà giáo viên phụ trách
  classes         UserClass[] // Các lớp mà user (sinh viên hoặc giáo viên) tham gia
  @@index([role]) // Index for filtering users by role
}


model Class {
  id            String   @id @default(cuid())
  name          String   // Tên lớp
  supervisorId  String?  // ID giáo viên phụ trách (có thể null nếu chưa có giáo viên)
  supervisor    User?    @relation("SupervisedClasses", fields: [supervisorId], references: [id])
  students      UserClass[] // Mối quan hệ nhiều-nhiều qua bảng UserClass
  studentCount  Int      @default(0) // Số lượng sinh viên

  @@index([supervisorId]) // Thêm chỉ mục vào supervisorId
}
model UserClass {
  id        String @id @default(cuid())
  userId    String
  classId   String
  user      User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  class     Class  @relation(fields: [classId], references: [id], onDelete: Cascade)

  @@unique([userId, classId]) // Đảm bảo không có trùng lặp
  @@index([userId])  // Thêm chỉ mục vào userId
  @@index([classId]) // Thêm chỉ mục vào classId
}

model Folder {
  id          String   @id @default(cuid())
  creatorId   String
  name        String
  description String?
  createdAt   DateTime @default(now())
  tests       Test[]
  creator     User     @relation("CreatedFolders", fields: [creatorId], references: [id], onDelete: Cascade)

  @@index([creatorId], name: "creatorId")
}

model Test {
  id              String      @id @default(cuid())
  creatorId       String
  folderId        String?
  timeStarted     DateTime?
  topic           String
  timeEnded       DateTime?
  createdAt       DateTime    @default(now())
  paragraphs      Paragraph[]
  questions       Question[]
  testType        TestType
  creator         User        @relation("CreatedTests", fields: [creatorId], references: [id], onDelete: Cascade)
  folder          Folder?     @relation(fields: [folderId], references: [id], onDelete: SetNull)
  accessibleBy    TestAccess[]
  testDuration    Int?        @default(60)// Duration of the test in minutes
  attemptsAllowed Int?        @default(1)// Number of allowed attempts (new field)
  TestResult      TestResult[]

  @@index([creatorId], name: "creatorId")
  @@index([folderId], name: "folderId")
}


model TestAccess {
  id          String @id @default(cuid())
  testId      String
  userId      String
  accessLevel String
  test        Test   @relation(fields: [testId], references: [id], onDelete: Cascade)
  user        User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([testId, userId])
  @@index([testId]) // Manual index to optimize queries by testId
  @@index([userId]) // Manual index to optimize queries by userId
}

model Paragraph {
  id        String     @id @default(cuid())
  testId    String
  content   String     @db.Text
  questions Question[]
  test      Test       @relation(fields: [testId], references: [id], onDelete: Cascade)

  @@index([testId], name: "testId")
}

model Question {
  id                String     @id @default(cuid())
  question          String
  answer            String
  testId            String?
  paragraphId       String?
  options           Json?
  percentageCorrect Float?
  questionType      TestType?
  userAnswer        String?
  isCorrect         Boolean?
  test              Test?      @relation(fields: [testId], references: [id], onDelete: Cascade)
  paragraph         Paragraph? @relation(fields: [paragraphId], references: [id], onDelete: Cascade)

  @@unique([question, paragraphId])
  @@index([testId], name: "testId")
  @@index([paragraphId], name: "paragraphId")
}

model TestResult {
  id             String   @id @default(cuid())
  testId         String
  studentId      String
  submittedAt    DateTime @default(now())
  score          Float    @default(0.0)
  totalScore     Float    @default(0.0)
  passed         Boolean  @default(false)
  studentAnswers Json     @db.Json
  feedback       String?  @db.Text
  startTime      DateTime // Start time of the test
  endTime        DateTime? // End time of the test
  test           Test     @relation(fields: [testId], references: [id], onDelete: Cascade)
  student        User     @relation(fields: [studentId], references: [id], onDelete: Cascade)
  attemptNumber  Int       @default(0) // New field: number of attempts made by the student

  @@unique([testId, studentId, attemptNumber]) // Updated unique constraint to track attempts
  @@index([testId])
  @@index([studentId])
}
